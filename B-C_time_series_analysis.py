# -*- coding: utf-8 -*-
"""Copy of time_series_analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mXJLF-RvUYfZEf4TeuccVqchLSvQt4WN

# Import Essential Libraries
"""

# Commented out IPython magic to ensure Python compatibility.
# python visualization libraries
import matplotlib.pyplot as plt
import matplotlib as mpl
# from mpl_toolkits.mplot3d import Axes3D
import seaborn as sns
# %matplotlib inline

import pandas as pd
import numpy as np

# Using plotly.express
import plotly.express as px
import plotly.graph_objects as go

"""# Mount Google Drive"""

import os

from google.colab import drive
drive.mount('/content/drive')

# edit this path if needed
my_path = '/content/drive/My Drive/Colab Notebooks/'

# change to this path
os.chdir(my_path)

# verify present working directory. It should be identical to 'my_path'
!pwd

"""# Ref
https://towardsdatascience.com/a-complete-guide-to-time-series-data-visualization-in-python-da0ddd2cfb01

#How to Import Time Series in Python?
In read_csv() function, set parse_dates = True, to convert the ‘Date’ column to DateTimeIndex
"""

df_stock = pd.read_csv('data/AAPL.csv', parse_dates=True, index_col = "Date")


# adding Date as column and index
df_stock['Date'] = df_stock.index

df = df_stock

# adding daily interval
df.index = pd.DatetimeIndex(df.index).to_period('D')

# display
display(df_stock.head())
display(df_stock.tail())

"""# Quick Plot"""

fig = px.line(
    data_frame = df_stock, 
    x='Date', 
    y='High', 
    title='Stock price (High)'
)

fig.show()

fig = px.area(
    data_frame = df_stock, 
    x='Date', 
    y='High', 
    title='Stock price (High)'
)

fig.show()

"""# Plotting all columns"""

df.plot(subplots = True, figsize = (10, 12))

"""# Plotting multiple traces
Previously, plotting multiple traces was difficult. One has to use Plotly's Go library and call add_traces function. Or, they need to melt multiple columns in to one (known as long-format).

But recently, it has been easier in Plotly Express-- one needs to pass a list in 'y'.

More: # https://plotly.com/python/wide-form/

Below, these three approaches are shown one by one

## Approach 1: Easy one (use plotly express)
"""

# plotting multiple 'y's (in a list)
fig = px.line(
  data_frame = df, 
  x='Date', 
  y=['Open', 'High', 'Low', 'Close', 'Adj Close'],   # note that y is a list
  title='Stock price'
)

fig.show()

"""## Approach 2: Okay one (use go.Figure and add_traces)"""

fig = go.Figure()

# add each trace separately. Use go.Scatter internally
fig.add_trace(go.Scatter(y = df['Open'], name="Open"))
fig.add_trace(go.Scatter(y = df['High'], name="High"))
fig.add_trace(go.Scatter(y = df['Low'], name="Low"))
fig.add_trace(go.Scatter(y = df['Close'], name="Close"))
fig.add_trace(go.Scatter(y = df['Adj Close'], name="Adj Close"))

fig.show()

"""## Approach 3: Hard one (use dataframe melting and plotly express)

Sometimes it is benefical to stack all columns into one and another column as label. To do that, we use pandas' melt command (below). Note that all 6 columns are not stacked into a single 'Label' column and another one named Value to show their types.
"""

# https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.melt.html

# remove Volume from this dataset
df_stock_temp = df_stock.drop(['Volume'], axis = 1)

df_stock_melted = pd.melt(
    df_stock_temp, id_vars=['Date'], 
    var_name = 'Label',
    value_vars=['Open', 'High', 'Low', 'Close', 'Adj Close'],    
    value_name = 'Value'
)
df_stock_melted.set_index(['Date'], inplace=True)
df_stock_melted['Date'] = df_stock_melted.index


display(df_stock_melted.head())
display(df_stock_melted.tail())

# show all lines together
fig = px.line(
    data_frame = df_stock_melted, 
    x='Date', 
    y='Value', 
    color = 'Label',
    title='Stock price'
)

fig.show()

"""# Data Filter"""

fig = px.line(
    data_frame = df_stock, 
    x='Date', 
    y='High', title='Stock price (High) with Rangeslider'
)

# Add rangeslider
fig.update_xaxes(        
    # add attribute rangeslider_visible (doc: https://plotly.com/python/reference/layout/xaxis/#layout-xaxis-rangeselector)    
    rangeslider_visible = True 
)

# show figure
fig.show()

"""**SECTION A**"""

fig = px.line( # you can also use 'px.area'
    data_frame = df_stock, 
    x=  df.Date, # changed from column 'Date' to index Date, 
    y='High', title='Stock price (High) with Rangeslider and RangeSliders'
)
df_stock.index
# Add rangeslider
fig.update_xaxes(        
    # add attribute rangeslider_visible (doc: https://plotly.com/python/reference/layout/xaxis/#layout-xaxis-rangeselector)    
    rangeslider_visible = True,

    # next, add rangeselector with rangeselector_buttons (doc: https://plotly.com/python/reference/layout/xaxis/#layout-xaxis-rangeselector-buttons)
    rangeselector_buttons = list(
        # list begin
        [          
         # Each dictionary item below indicates a filter button. Dictionary keys (e.g., count, label, step, stepmode) are described in rangeselector_buttons's documnetation
          dict(count = 3,  label = "1Q", step = "day", stepmode = "backward"), # button 1
          dict(count = 4,  label = "2Q", step = "day", stepmode = "backward"), # button 2
          dict(count = 8,  label = "3Q", step = "day", stepmode = "backward"), # button 3
          dict(count = 12, label = "4Q", step = "day", stepmode = "backward"), # button 4
          dict(step="all")                                                       # button 5
        ] 
        # list end    
    )
)

# show figure
fig.show()

"""# Data Animation"""

df_country = px.data.gapminder()

display(df_country.head())
display(df_country.tail())

# note that animation_group should exist in all frames
fig = px.scatter(
    data_frame = df_country, 
    x="gdpPercap",         # gdp per capita
    y="lifeExp",           # life expectancy  
    size="pop",            # population
    color="continent",     # group/label
    hover_name="country",
    log_x=True, 
    size_max=55, 
    range_x=[100,100000], 
    range_y=[25,90],
    title= "GDP Per Captia vs Life Expectancy of Countries", 
    
    # animation control
    animation_frame="year", 
    animation_group="country",
)

fig.show()

# Watch as bars chart population changes
fig = px.bar(
    data_frame = df_country, 
    x="continent",        # continent
    y="pop",              # population    
    color="continent",    # group/label
     
    range_y=[0, 8000000000],
    title= "Population of Countries", 
    
    # animation control
    animation_frame="year", 
    animation_group="country",
)

fig.show()

"""# Adding facets"""

# adding facet
fig = px.scatter(
    data_frame = df_country, 
    x="gdpPercap",         # gdp per capita
    y="lifeExp",           # life expectancy  
    size="pop",            # population
    color="continent",     # group/label
    hover_name="country",
    log_x=True, 
    size_max=55, 
    range_x=[100,100000], 
    range_y=[25,90],
    title= "GDP Per Captia vs Life Expectancy of Countries", 
    
    # animation control
    animation_frame="year", 
    animation_group="country",

    # This is new #
    facet_col="continent" # new attribute facet 
)

fig.show()

"""# Slicing, filtering Data"""

# showing data only for 2019
df_subset =  df['2019']
display(df_subset)

# showing data only for August, 2019
df_subset =  df['2019-08']
display(df_subset)

# showing data from August 1st to 15th, 2019
df_subset =  df['2019-08-01': '2019-08-15']
display(df_subset)

fig = px.line(
  data_frame = df_subset, 
  # x='Date', 
  y='Open', title='subset'
)

fig.show()

"""## Missing value"""

# replace missing values with columns' means
df_subset = df_subset.fillna(df_subset.mean())

"""# Time Series Analysis

**SECTION B**\
5 daya moving average plot of High stock price
"""

# window size or lag = 5
window_size = 5
df_rolling = df['High'].rolling(window = window_size).mean()
display(df_rolling.head())

# replace missing values
df_rolling = df_rolling.fillna(df_rolling.mean())
display(df_rolling.head())

fig = px.line( # you can also use 'px.area'
    data_frame = df_rolling, 
    x=  df.Date, # changed from column 'Date' to index Date, 
    y='High', title='5 day moving average stock price (High) with Rangeslider and RangeSliders'
)
df_stock.index
# Add rangeslider
fig.update_xaxes(        
    # add attribute rangeslider_visible (doc: https://plotly.com/python/reference/layout/xaxis/#layout-xaxis-rangeselector)    
    rangeslider_visible = True,

    # next, add rangeselector with rangeselector_buttons (doc: https://plotly.com/python/reference/layout/xaxis/#layout-xaxis-rangeselector-buttons)
    rangeselector_buttons = list(
        # list begin
        [          
         # Each dictionary item below indicates a filter button. Dictionary keys (e.g., count, label, step, stepmode) are described in rangeselector_buttons's documnetation
          dict(count = 3,  label = "1Q", step = "day", stepmode = "backward"), # button 1
          dict(count = 4,  label = "2Q", step = "day", stepmode = "backward"), # button 2
          dict(count = 8,  label = "3Q", step = "day", stepmode = "backward"), # button 3
          dict(count = 12, label = "4Q", step = "day", stepmode = "backward"), # button 4
          dict(step="all")                                                       # button 5
        ] 
        # list end    
    )
)

# show figure
fig.show()

"""As it can be seen above, after performing 5 day moving average the time series get smoother compared to the original time series due to the fact that the values are getting averaged over 5 day interval each time.

### Approach 2: Use library function in Plotly
Note that this is not exactly the same as Approach 1. 

Ref: https://plotly.com/python/linear-fits/
"""

fig = px.scatter(
  data_frame = df['Open'], 
  y='Open', trendline="rolling", 
  trendline_options=dict(window=window_size), 
  title='5-point moving average Stock price (Open)'
)
fig.show()

"""### Approach 3: Hybrid (use Plotly express + Go)

This approach is ugly and not recommended. Only use it if absolutely necessary.
"""

# create to plotly express figures

## first
fig_px = px.scatter(
  data_frame = df['Open'], 
  y='Open', trendline="rolling", 
  trendline_options=dict(window=window_size), 
  title='5-point moving average Stock price (Open)'
)
## add color
fig_px.update_traces(line=dict(color = 'rgba(50,50,50,0.2)'))

## second
fig_px1 = px.line(
  data_frame = df['Open'], 
  y='Open', 
  title='Stock price (Open)'
) 

## combine them with go.Figure (note that the 'data' attribute is extracted and combined)
fig = go.Figure(data = fig_px.data + fig_px1.data)

fig.show()

"""## Autocorrelation and Partial Autocorrelation
A correlation between a time series and its delayed version.
Useful in finding patterns

**SECTION C**\
creating AR(1) process
"""

from statsmodels.tsa.stattools import  pacf
from statsmodels.graphics import tsaplots # time series plots
from statsmodels.tsa.stattools import  acf
from numpy.random import default_rng
rng = default_rng(12345)


n_points = 200
ar_factor = 0.5
w_std = 1.0

X_t = np.zeros(n_points)

for i in range(1, n_points):
  X_t[i] = ar_factor * X_t[i-1] + rng.normal(0, w_std)

# create a data-frame
dates = pd.date_range(start='2020-06-20', periods=n_points, freq='D')

df_simulated = pd.DataFrame(
  {'Date': dates, 
   'X': X_t
  },
  index = dates
)

display(df_simulated)

# visualiza
fig = px.line(data_frame = df_simulated, y = 'X', markers=True)

# Add rangeslider
fig.update_xaxes(
  rangeslider_visible = True 
)

fig.show()

nlag = 10
result = acf(x=df_simulated['X'],  nlags = nlag)

fig = tsaplots.plot_acf(df_simulated['X'], lags = nlag)
plt.show()
print(result)

from statsmodels.tsa.stattools import  pacf

result = pacf(x=df_simulated['X'],  nlags = nlag)

fig = tsaplots.plot_pacf(df_simulated['X'], lags = 10)
plt.show()
print(result)

"""As it can be seen above, with factor of 0.5 we get the same acf and pacf. Since our model is lag 1 model AR(1) the impact of lag 1 in time series is statistically significant. As it can bee seen above, the lag 1 exceeds the significance band in both acf and pacf while other lags remain within the band (blue shaded area)"""